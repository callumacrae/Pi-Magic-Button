{"name":"Pi-magic-button","tagline":"Physical button + API end point","body":"This program makes it easy to map physical buttons, connected to the Raspberry Pi's GPIO pins, to API end points. Details for each button are managed in a configuration file. All you really need to do is wire things up, then edit the file.\r\n\r\n------------------------------------------------------------------------------\r\n### Installation\r\n------------------------------------------------------------------------------\r\n\r\n#### Step 1: Clone this repo\r\n\r\n```\r\ngit clone https://github.com/projectweekend/Pi-Magic-Button.git\r\n```\r\n\r\n#### Step 2: Run install script\r\n\r\nFrom the project directory `Pi-Magic-Button/`, run the following command:\r\n\r\n```\r\n./install.sh\r\n```\r\n\r\n**NOTE:** This step will probably take several minutes to complete. When the script begins to install [Upstart](http://upstart.ubuntu.com/), you will receive a warning. It will prompt you to type the following message to confirm the installation: `Yes, do as I say!`. You must type it exactly.\r\n\r\n#### Step 3: Reboot\r\n\r\n```\r\nsudo reboot\r\n```\r\n\r\n------------------------------------------------------------------------------\r\n### Configuration\r\n------------------------------------------------------------------------------\r\n\r\nThe actions for each button need to be defined in a file named: `config.yml`. The install script will create an empty one in the root of `/Pi-Magic-Button`. Here is a complete example file:\r\n\r\n~~~yaml\r\nsuccess_pin: 17\r\nfailure_pin: 22\r\nactions:\r\n    - button_pin: 4\r\n      api_url: https://www.something.com/api/blah\r\n      api_method: POST\r\n      api_data:\r\n        some_field: 122345\r\n        some_other_field: some string data\r\n    - button_pin: 18\r\n      api_url: https://www.something.com/api/test\r\n      api_method: POST\r\n      api_data:\r\n        a_different_field: 77777\r\n        another_different_field: some string data\r\n~~~\r\n\r\n#### Main Properties\r\n\r\n* `succes_pin`: This pin can be connected to an LED that will light up if the button's action successfully contacted the API end point.\r\n* `failure_pin`: This pin can be connected to an LED that will light up if the button's action did not successfully contact the API end point.\r\n* `actions`: This is an array of configurations for each button that has been wired up to the Raspberry Pi.\r\n\r\n#### Button Properties\r\n\r\nEach button item in the configuration file's `actions` array has 4 properties.\r\n\r\n* `button_pin`: This is the pin connected to the button. Under the hood each button pin is initialized using a software-defined pull up resistor. When wiring up the button connect it to ground so that it will pull the pin low when pressed.\r\n* `api_url`: This is the URL that the button will make a request to when pressed\r\n* `api_method`: This is the HTTP request method to use with the URL: `GET`, `POST`, `PUT`, `DELETE`\r\n* `api_data`: Each property defined in this object will be passed to the `api_url` in the body of a `POST` or `PUT` request. `GET` and `DELETE` requests will ignore this.\r\n\r\n------------------------------------------------------------------------------\r\n### Upstart\r\n------------------------------------------------------------------------------\r\n\r\n[Upstart](http://upstart.ubuntu.com/) is used to run this program in the background on the Raspberry Pi. It will automatically start on boot as well. Every time you edit the `config.yml` you will need to restart the `magic-button` service so that it can load the new configurations. Use this command:\r\n\r\n```\r\nsudo service magic-button restart\r\n```\r\n\r\nTo stop the service use this command:\r\n\r\n```\r\nsudo service magic-button stop\r\n```\r\n\r\nTo start it back up again, use this command:\r\n\r\n```\r\nsudo service magic-button start\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}